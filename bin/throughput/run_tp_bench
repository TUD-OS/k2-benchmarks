#! /usr/bin/ksh

#
# this test only evaluates the maximum throughput achieved with each I/O sched.
#
# Copyright (c) 2019 Till Miemietz
#

# the name of the device under test. For instance "nvme0n1" refers to the device
# found in /dev/nvme0n1
DEVNAME="nvme0n1"

# root directory for all benchmark results. Change this to dump result files
# at another location. Make sure that you have write permissions for the 
# directory specified.
DATE=`date +%Y%m%d%H%M%S`
BASEDIR="/home/benchmarks/tp_res_$DATE"

# the collection of I/O schedulers to test in this run. Multiple schedulers
# must be separated with a space. The comment line below shows
# SCHEDS="bfq mq-deadline kyber none k2"
SCHEDS="bfq"

# the operation modes for which the throughput should be tested. See the line
# below for a collection of possible workload profiles. For more variety, refer
# to the documentation of fio.
# MODES="read randread randwrite write randrw"
MODES="randread"

# we can restrict block sizes to 4k and 64k, since other settings are
# not yielding different results (apart from absolute latencies)
BS="4K 64K"

# use different rates (in MiB/s) for different workload types since some should 
# be significantly faster according to Samsung's specification. Rates should go 
# up to a third of the approximate performance limit (entire benchmark is split
# into three workers). Since this benchmark only tests for the maximum 
# throughput, only one rate that exceeds the device capabilities is given. If 
# you wish to test with multiple rates, they have to be separated with a space.
#
# Approximate bandwidth limits for the 970evo (with 64K block size)
# seq. read: 2100 MB/s
# rnd. read: 800 MB/s
# seq. write: 1200 MB/s
# rnd. write: 900 MB/s
READ_RATES="900"
WRITE_RATES="600"
RREAD_RATES="600" 
RWRITE_RATES="600"

################################################################################
#                         START OF ACTUAL SCRIPT                               #
################################################################################

# final rates for testing, assigned depending on workload type
RATES=""

# device size in bytes
DEVSIZE=`lsblk -b -o NAME,SIZE | grep $DEVNAME`
if [ $? -ne 0 ]
  then
  echo "$DEVNAME does not appear to be a valid block device..."
  exit 1
else
  DEVSIZE=`echo $DEVSIZE | cut -d' ' -f2`
fi

# try to load the K2 module. If it is not present, leave a warning but proceed,
# since this test is not made for testing with K2. To do so, use the k2_qd_bench
# script in this folder
modprobe k2
lsmod | grep "k2" > /dev/null
if [ $? -ne 0 ]
  then
  echo "WARNING: could not load K2 kernel module (not an issue if not used)"
fi

# initialize the first half of the disk with all zeroes, the second half is
# trimmed to simulate a sane state of the SSD
(( DEVSIZE_HALF = $DEVSIZE / 2))
(( DDCOUNT = $DEVSIZE_HALF / 1048576))
echo "Initializing drive /dev/${DEVNAME}..."
blkdiscard -o $DEVSIZE_HALF /dev/${DEVNAME}                                                 
dd if=/dev/zero of=/dev/${DEVNAME} bs=1024k count=$DDCOUNT status=progress

# create the root directory of the result tree
mkdir $BASEDIR

# for each mq I/O scheduler
for SCHED in $SCHEDS
  do
  # set the current IO scheduler
  echo $SCHED > /sys/block/${DEVNAME}/queue/scheduler
  mkdir $BASEDIR/${SCHED}
  
  # do some tuning depending on the scheduler
  case "$SCHED" in
    kyber )
      echo "setting target configuration for kyber scheduler."
      echo 2000 > /sys/block/${DEVNAME}/queue/iosched/read_lat_nsec
      echo 10000 > /sys/block/${DEVNAME}/queue/iosched/write_lat_nsec;;
    bfq )
      echo 0 > /sys/block/${DEVNAME}/queue/iosched/slice_idle
      # no strict guarantees, would destroy the effect of libaio
      echo 2 > /sys/block/${DEVNAME}/queue/iosched/fifo_expire_async
      echo 1 > /sys/block/${DEVNAME}/queue/iosched/fifo_expire_sync;;
    # additional settings for deadline are not improving latency / throughput
    # mq-deadline )
      # disable low deadlines for testing
      # echo 2 > /sys/block/${DEVNAME}/queue/iosched/write_expire
      # echo 1 > /sys/block/${DEVNAME}/queue/iosched/read_expire
      # echo 1 > /sys/block/${DEVNAME}/queue/iosched/fifo_batch;;
    k2 )
      if [ ! -z $1 ]
        then
        echo $1 > /sys/block/${DEVNAME}/queue/iosched/max_inflight
      fi;;
  esac
  
  # loop over all modes
  for CM in $MODES
    do
    # adapt rate list depending on current operating mode
    case "$CM" in
      read )
        RATES="$READ_RATES";;
      write )
        RATES="$WRITE_RATES";;
      randread )
        RATES="$RREAD_RATES";;
      randwrite )
        RATES="$RWRITE_RATES";;
      rw )
        RATES="$RREAD_RATES";;
      randrw )
        RATES="$RWRITE_RATES";;
    esac

    # loop over all block sizes
    for CBS in $BS
      do

      # create a new directory for the autogenerated fio and result files
      WDIR=$BASEDIR/${SCHED}/${CM}_bs${CBS}
      mkdir -p $WDIR

      # loop over all rates
      for CR in $RATES
        do
        # announce new test case
        echo
        echo "###" 
        echo "SCHED $SCHED - MODE $CM - BS $CBS - RATE ${CR}M"
        echo "###"
        echo

	# in case something was written before, trim the disk again
        blkdiscard -o $DEVSIZE_HALF /dev/${DEVNAME}
        BENCHFILE="bm${CM}${CBS}${CR}.fio"
        OUTFILE="bm${CM}${CBS}${CR}.out"

        # prepare template for current run by substituting placeholders
        TEMPLATE=`cat tpbench.fio | awk -v n="$CR" -v b="$CBS" -v m="$CM" \
	    -v d="/dev/${DEVNAME}" '
            { gsub("%R", n "M"); gsub("%M", m); gsub("%B", b); gsub("%D", d);
	      print $0; }
        '`
    
        echo "$TEMPLATE" > $WDIR/$BENCHFILE
  
        fio $WDIR/$BENCHFILE > $WDIR/$OUTFILE &
        FIO_PARENT=$!

        # somehow, there is a delay before fio spawns it worker child...
        while [ `ps -ef | grep fio | wc -l` -le 2 ]
          do
          echo "waiting for children to spawn"
        done

        # wait for the benchmark to complete
        wait $FIO_PARENT
	echo "fio process $FIO_PARENT has finished."
      done
    done
  done
done

exit 0
